{
    "link_type": "dedupe_only",
    "unique_id_column_name": "unique_id",
    "blocking_rules": [
        "l.forename1_dm = r.forename1_dm and l.occupation = r.occupation and l.dob_year = r.dob_year",
        "l.postcode = r.postcode and l.surname_dm = r.surname_dm",
        "l.postcode = r.postcode and l.forename1_dm = r.forename1_dm",
        "l.outward_postcode_std = r.outward_postcode_std and l.dob = r.dob",
        "l.forename1_dm = r.forename1_dm and l.surname_dm = r.surname_dm and l.forename2_std = r.forename2_std",
        "l.forename1_dm = r.forename1_dm and l.surname_dm = r.surname_dm and l.birth_place = r.birth_place"
    ],
    "comparison_columns": [
        {
            "custom_name": "surname_std",
            "case_expression": "case\n    when surname_std_l is null or surname_std_r is null then -1\n    when jaro_winkler_sim(surname_std_l, surname_std_r) >= 1.0 then 3\n    when (jaro_winkler_sim(ifnull(surname_std_l, '1234abcd5678'), ifnull(forename1_std_r, '987pqrxyz654')) >= 1.0 OR jaro_winkler_sim(ifnull(surname_std_l, '1234abcd5678'), ifnull(forename2_std_r, '987pqrxyz654')) >= 1.0 OR jaro_winkler_sim(ifnull(surname_std_l, '1234abcd5678'), ifnull(forename3_std_r, '987pqrxyz654')) >= 1.0 OR jaro_winkler_sim(ifnull(surname_std_l, '1234abcd5678'), ifnull(forename4_std_r, '987pqrxyz654')) >= 1.0 OR jaro_winkler_sim(ifnull(surname_std_l, '1234abcd5678'), ifnull(forename5_std_r, '987pqrxyz654')) >= 1.0) then 2\n    \n        when Dmetaphone(surname_std_l) = Dmetaphone(surname_std_r) then 1\n        when DmetaphoneAlt(surname_std_l) = DmetaphoneAlt(surname_std_r) then 1\n        \n    when jaro_winkler_sim(surname_std_l, surname_std_r) >= 0.88 then 1\n    else 0 end  as gamma_surname_std",
            "custom_columns_used": [
                "surname_std",
                "forename1_std",
                "forename2_std",
                "forename3_std",
                "forename4_std",
                "forename5_std"
            ],
            "num_levels": 4,
            "term_frequency_adjustments": true,
            "u_probabilities": [
                0.9972811916144119,
                0.0018458589872244128,
                0.00043107586588394647,
                0.0004418735324796065
            ],
            "fix_u_probabilities": true,
            "gamma_index": 0,
            "data_type": "string",
            "fix_m_probabilities": false,
            "m_probabilities": [
                0.06355687230825424,
                0.13808776438236237,
                0.008427422493696213,
                0.7899279594421387
            ]
        },
        {
            "custom_name": "forename1_std",
            "case_expression": "case\n    when forename1_std_l is null or forename1_std_r is null then -1\n    when jaro_winkler_sim(forename1_std_l, forename1_std_r) >= 1.0 then 3\n    when (jaro_winkler_sim(ifnull(forename1_std_l, '1234abcd5678'), ifnull(surname_std_r, '987pqrxyz654')) >= 1.0 OR jaro_winkler_sim(ifnull(forename1_std_l, '1234abcd5678'), ifnull(forename2_std_r, '987pqrxyz654')) >= 1.0 OR jaro_winkler_sim(ifnull(forename1_std_l, '1234abcd5678'), ifnull(forename3_std_r, '987pqrxyz654')) >= 1.0 OR jaro_winkler_sim(ifnull(forename1_std_l, '1234abcd5678'), ifnull(forename4_std_r, '987pqrxyz654')) >= 1.0 OR jaro_winkler_sim(ifnull(forename1_std_l, '1234abcd5678'), ifnull(forename5_std_r, '987pqrxyz654')) >= 1.0) then 2\n    \n        when Dmetaphone(forename1_std_l) = Dmetaphone(forename1_std_r) then 1\n        when DmetaphoneAlt(forename1_std_l) = DmetaphoneAlt(forename1_std_r) then 1\n        \n    when jaro_winkler_sim(forename1_std_l, forename1_std_r) >= 0.88 then 1\n    else 0 end  as gamma_forename1_std",
            "custom_columns_used": [
                "surname_std",
                "forename1_std",
                "forename2_std",
                "forename3_std",
                "forename4_std",
                "forename5_std"
            ],
            "num_levels": 4,
            "term_frequency_adjustments": true,
            "u_probabilities": [
                0.9865413073278385,
                0.007948541824533976,
                0.0009669396446855789,
                0.004543211202941987
            ],
            "fix_u_probabilities": true,
            "gamma_index": 1,
            "data_type": "string",
            "fix_m_probabilities": false,
            "m_probabilities": [
                0.1673450917005539,
                0.16003316640853882,
                0.00523568969219923,
                0.6673860549926758
            ]
        },
        {
            "custom_name": "forename2_std",
            "case_expression": "case\n    when forename2_std_l is null or forename2_std_r is null then -1\n    when jaro_winkler_sim(forename2_std_l, forename2_std_r) >= 1.0 then 3\n    when (jaro_winkler_sim(ifnull(forename2_std_l, '1234abcd5678'), ifnull(surname_std_r, '987pqrxyz654')) >= 1.0 OR jaro_winkler_sim(ifnull(forename2_std_l, '1234abcd5678'), ifnull(forename1_std_r, '987pqrxyz654')) >= 1.0 OR jaro_winkler_sim(ifnull(forename2_std_l, '1234abcd5678'), ifnull(forename3_std_r, '987pqrxyz654')) >= 1.0 OR jaro_winkler_sim(ifnull(forename2_std_l, '1234abcd5678'), ifnull(forename4_std_r, '987pqrxyz654')) >= 1.0 OR jaro_winkler_sim(ifnull(forename2_std_l, '1234abcd5678'), ifnull(forename5_std_r, '987pqrxyz654')) >= 1.0) then 2\n    \n        when Dmetaphone(forename2_std_l) = Dmetaphone(forename2_std_r) then 1\n        when DmetaphoneAlt(forename2_std_l) = DmetaphoneAlt(forename2_std_r) then 1\n        \n    when jaro_winkler_sim(forename2_std_l, forename2_std_r) >= 0.88 then 1\n    else 0 end  as gamma_forename2_std",
            "custom_columns_used": [
                "surname_std",
                "forename1_std",
                "forename2_std",
                "forename3_std",
                "forename4_std",
                "forename5_std"
            ],
            "num_levels": 4,
            "u_probabilities": [
                0.9889050867178061,
                0.0046983226891593845,
                0.003958574088614007,
                0.0024380165044206752
            ],
            "fix_u_probabilities": true,
            "gamma_index": 2,
            "data_type": "string",
            "term_frequency_adjustments": false,
            "fix_m_probabilities": false,
            "m_probabilities": [
                0.2947735978751602,
                0.05437184640744031,
                0.055742258142640104,
                0.594004068373532
            ]
        },
        {
            "col_name": "occupation",
            "num_levels": 2,
            "u_probabilities": [
                0.9604423153449854,
                0.03955768465501463
            ],
            "fix_u_probabilities": true,
            "gamma_index": 3,
            "data_type": "string",
            "term_frequency_adjustments": false,
            "fix_m_probabilities": false,
            "case_expression": "case\n    when occupation_l is null or occupation_r is null then -1\n    when occupation_l = occupation_r then 1\n    else 0 end  as gamma_occupation",
            "m_probabilities": [
                0.07673575729131699,
                0.9232642650604248
            ]
        },
        {
            "col_name": "dob",
            "case_expression": "case\n    when dob_l is null or dob_r is null then -1\n    when dob_l = dob_r  and substr(dob_l, -5) = '01-01'  then 4\n    when dob_l = dob_r  then 5\n    when levenshtein(dob_l, dob_r) <= 1 then 3\n    when datediff(dob_l, dob_r) <= 365 then 2\n    when datediff(dob_l, dob_r) <= 10*365 then 1\n    else 0 end  as gamma_dob",
            "num_levels": 6,
            "u_probabilities": [
                0.4716630516869235,
                0.056529062998284245,
                0.46724005927640677,
                0.004270734210057826,
                0.0002786493533007708,
                1.8442475026868403e-05
            ],
            "m_probabilities": [
                0.015286620706319809,
                0.002689703833311796,
                0.009273078292608261,
                0.29795193672180176,
                0.1632627248764038,
                0.5115359425544739
            ],
            "fix_u_probabilities": true,
            "gamma_index": 1,
            "data_type": "string",
            "term_frequency_adjustments": false,
            "fix_m_probabilities": false
        },
        {
            "custom_name": "custom_postcode_distance_comparison",
            "custom_columns_used": [
                "postcode",
                "lat_lng",
                "birth_place"
            ],
            "case_expression": "case\n    when (postcode_l is null or postcode_r is null) and (birth_place_l is null or birth_place_r is null) then -1\n    when postcode_l = postcode_r then 5\n    when  (cast(atan2(sqrt(\n    (\n    pow(sin(radians(lat_lng_r['lat'] - lat_lng_l['lat']))/2, 2) +\n    cos(radians(lat_lng_l['lat'])) * cos(radians(lat_lng_r['lat'])) *\n    pow(sin(radians(lat_lng_r['long'] - lat_lng_l['long'])/2),2)\n    )\n    ), sqrt(-1*\n    (\n    pow(sin(radians(lat_lng_r['lat'] - lat_lng_l['lat']))/2, 2) +\n    cos(radians(lat_lng_l['lat'])) * cos(radians(lat_lng_r['lat'])) *\n    pow(sin(radians(lat_lng_r['long'] - lat_lng_l['long'])/2),2)\n    )\n     + 1)) * 12742 as float) < 5) then 4\n    when  (cast(atan2(sqrt(\n    (\n    pow(sin(radians(lat_lng_r['lat'] - lat_lng_l['lat']))/2, 2) +\n    cos(radians(lat_lng_l['lat'])) * cos(radians(lat_lng_r['lat'])) *\n    pow(sin(radians(lat_lng_r['long'] - lat_lng_l['long'])/2),2)\n    )\n    ), sqrt(-1*\n    (\n    pow(sin(radians(lat_lng_r['lat'] - lat_lng_l['lat']))/2, 2) +\n    cos(radians(lat_lng_l['lat'])) * cos(radians(lat_lng_r['lat'])) *\n    pow(sin(radians(lat_lng_r['long'] - lat_lng_l['long'])/2),2)\n    )\n     + 1)) * 12742 as float) < 50)  then 3\n    when (birth_place_l = birth_place_r) then 2\n    when  (cast(atan2(sqrt(\n    (\n    pow(sin(radians(lat_lng_r['lat'] - lat_lng_l['lat']))/2, 2) +\n    cos(radians(lat_lng_l['lat'])) * cos(radians(lat_lng_r['lat'])) *\n    pow(sin(radians(lat_lng_r['long'] - lat_lng_l['long'])/2),2)\n    )\n    ), sqrt(-1*\n    (\n    pow(sin(radians(lat_lng_r['lat'] - lat_lng_l['lat']))/2, 2) +\n    cos(radians(lat_lng_l['lat'])) * cos(radians(lat_lng_r['lat'])) *\n    pow(sin(radians(lat_lng_r['long'] - lat_lng_l['long'])/2),2)\n    )\n     + 1)) * 12742 as float) < 150)  then 1\n    else 0\n    end  as gamma_custom_postcode_distance_comparison",
            "num_levels": 6,
            "u_probabilities": [
                0.7848280546106594,
                0.1550369685599911,
                0.001640004080340632,
                0.052959590326011066,
                0.0055246012356815295,
                1.0781187316298693e-05
            ],
            "m_probabilities": [
                0.03361062332987785,
                0.002923530526459217,
                0.1852741688489914,
                0.06985760480165482,
                0.09465742111206055,
                0.6136766672134399
            ],
            "fix_u_probabilities": true,
            "gamma_index": 2,
            "data_type": "string",
            "term_frequency_adjustments": false,
            "fix_m_probabilities": false
        }
    ],
    "additional_columns_to_retain": [
        "cluster",
        "source_dataset"
    ],
    "em_convergence": 0.001,
    "max_iterations": 100,
    "retain_intermediate_calculation_columns": false,
    "retain_matching_columns": false,
    "source_dataset_column_name": "source_dataset",
    "proportion_of_matches": 1.0626704955126556e-07
}